// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v4/pgxpool"
	"github.com/tehrelt/test-users-api/internal/config"
	"github.com/tehrelt/test-users-api/internal/service/userservice"
	"github.com/tehrelt/test-users-api/internal/storage/pg/userstorage"
	"github.com/tehrelt/test-users-api/internal/transport/http"
	"log/slog"
	"time"
)

// Injectors from wire.go:

func New(ctx context.Context) (*App, func(), error) {
	configConfig := config.New()
	pool, cleanup, err := _pg(ctx, configConfig)
	if err != nil {
		return nil, nil, err
	}
	userStorage := userstorage.New(pool)
	userService := userservice.New(userStorage, userStorage)
	server := http.New(configConfig, userService)
	app := newApp(configConfig, server)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func _pg(ctx context.Context, cfg *config.Config) (*pgxpool.Pool, func(), error) {
	host := cfg.Pg.Host
	port := cfg.Pg.Port
	user := cfg.Pg.Username
	pass := cfg.Pg.Password
	name := cfg.Pg.Name

	cs := fmt.Sprintf(`postgres://%s:%s@%s:%d/%s?sslmode=disable`, user, pass, host, port, name)

	pool, err := pgxpool.Connect(ctx, cs)
	if err != nil {
		return nil, func() {}, err
	}
	slog.Debug("connecting to database", slog.String("conn", cs))
	t := time.Now()
	if err := pool.Ping(ctx); err != nil {
		slog.Error("failed to connect to database", slog.String("err", err.Error()), slog.String("conn", cs))
		return nil, func() { pool.Close() }, err
	}
	slog.Info("connected to database", slog.String("ping", fmt.Sprintf("%2.fs", time.Since(t).Seconds())))

	return pool, func() { pool.Close() }, nil
}
